{"version":3,"file":"static/js/328.f8523453.chunk.js","mappings":"gSAEaA,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yDAIpBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4KASpBG,EAAWL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2B,kBCiDjC,EAtDiB,WACf,IAAAK,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEpBI,GAA8BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAElBG,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,IAjBAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACX,IAAMI,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEWC,EAAAA,EAAAA,IAAmBZ,GAAS,KAAD,EAA/CQ,EAAWC,EAAAI,KACjBlB,EAAQa,EAAYd,MAAMe,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAE1BM,EAAAA,GAAAA,MAAYN,EAAAK,GAAME,SAClB,QAEkB,OAFlBP,EAAAC,KAAA,GAEAX,GAAW,GAAOU,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAX,EAAA,wBAErB,kBAVe,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KAYhBjB,GACF,GAAG,CAACH,IAEAF,EACF,OAAOuB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAOhB,OAAO5B,EAAK6B,QACVF,EAAAA,EAAAA,KAACvC,EAAO,CAAA0C,UACNH,EAAAA,EAAAA,KAACnC,EAAQ,CAAAsC,SACN9B,EAAK+B,KAAI,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAMC,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aAAY,OACxCC,EAAAA,EAAAA,MAAC1C,EAAQ,CAAAoC,SAAA,EACPH,EAAAA,EAAAA,KAAA,OACEU,IAAOF,EARF,mCAQ4BA,EAT3C,6EAUUG,IAAKL,KAEPG,EAAAA,EAAAA,MAAA,KAAAN,SAAA,CAAG,UAAQG,MACXG,EAAAA,EAAAA,MAAA,KAAAN,SAAA,CAAG,cAAYI,OANFD,EAOJ,SAKjBN,EAAAA,EAAAA,KAACvC,EAAO,CAAA0C,UACNH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,wBAGT,C","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\nexport const CastList = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n  @media screen and (min-width: 1200px) {\n    justify-content: flex-start;\n  }\n`;\nexport const CastItem = styled.li`\n  width: 150px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader/Loader';\n\nimport { Section, CastList, CastItem } from './Cast.styled';\nimport { fetchMovieCastById } from 'services/apiFilms';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  // const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchCasts = async () => {\n      try {\n        const castDetails = await fetchMovieCastById(movieId);\n        setCast(castDetails.cast);\n      } catch (error) {\n        toast.error(error.message);\n        // setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCasts();\n  }, [movieId]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const NO_IMAGE =\n    'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n  const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\n\n  return cast.length ? (\n    <Section>\n      <CastList>\n        {cast.map(({ name, character, profile_path }) => (\n          <CastItem key={name}>\n            <img\n              src={!!profile_path ? IMG_PATH + profile_path : NO_IMAGE}\n              alt={name}\n            />\n            <p>Actor: {name}</p>\n            <p>Character: {character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </Section>\n  ) : (\n    <Section>\n      <p>Cast list is empty</p>\n    </Section>\n  );\n};\n\nexport default CastPage;\n"],"names":["Section","styled","_templateObject","_taggedTemplateLiteral","CastList","_templateObject2","CastItem","_templateObject3","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","loading","setLoading","movieId","useParams","useEffect","fetchCasts","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","castDetails","_context","prev","next","fetchMovieCastById","sent","t0","toast","message","finish","stop","apply","arguments","_jsx","Loader","length","children","map","_ref2","name","character","profile_path","_jsxs","src","alt"],"sourceRoot":""}